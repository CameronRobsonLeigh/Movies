name: Build Pipeline

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: DockerCompose@0
  displayName: 'Build Docker images'
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Azure subscription 1 (67336b9e-4aa9-4fe1-939b-d5d2efde661f)'
    azureContainerRegistry: '{"loginServer":"aksdevregistrycam.azurecr.io", "id" : "/subscriptions/67336b9e-4aa9-4fe1-939b-d5d2efde661f/resourceGroups/AKS-DEV/providers/Microsoft.ContainerRegistry/registries/AKSDEVRegistryCam"}'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Build services'

- task: DockerCompose@0
  displayName: 'Push Docker images'
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Azure subscription 1 (67336b9e-4aa9-4fe1-939b-d5d2efde661f)'
    azureContainerRegistry: '{"loginServer":"aksdevregistrycam.azurecr.io", "id" : "/subscriptions/67336b9e-4aa9-4fe1-939b-d5d2efde661f/resourceGroups/AKS-DEV/providers/Microsoft.ContainerRegistry/registries/AKSDEVRegistryCam"}'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Push services'
    includeLatestTag: false
    
- task: CopyFiles@2
  displayName: 'Copy Files to Temporary Staging Artifact'
  inputs:
    Contents: 'aks-deployment.yml'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'manifest'
      publishLocation: 'Container'

- task: DownloadPipelineArtifact@2
  displayName: 'Download Build Artifacts'
  inputs:
    artifactName: 'manifest'
    downloadPath: '$(Build.ArtifactStagingDirectory)'

- task: KubernetesManifest@0
  displayName: Create Image Pull Secret
  inputs:
    action: 'createSecret'
    kubernetesServiceConnection: 'AKS-DEV-ingress'
    namespace: 'ingress-nginx'
    secretType: 'dockerRegistry'
    secretName: 'regcred'
    dockerRegistryEndpoint: 'AKSDEVRegistryCam'

- task: KubernetesManifest@0
  displayName: Deploy to Kubernetes cluster
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: 'AKS-DEV-ingress'
    namespace: 'ingress-nginx'
    manifests: 'aks-deployment.yml'
    containers: 'AKSDEVRegistryCam/react.frontend-i:latest'
    imagePullSecrets: 'regcred'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'AKS-DEV-ingress'
    namespace: 'ingress-nginx'
    command: 'rollout'
    arguments: 'restart Deployment/apigateway Deployment/catalogapi Deployment/front-end Deployment/ingress-nginx-controller'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'

